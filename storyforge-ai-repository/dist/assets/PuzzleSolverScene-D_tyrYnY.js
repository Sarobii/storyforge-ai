var y=Object.defineProperty;var x=(p,g,t)=>g in p?y(p,g,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[g]=t;var c=(p,g,t)=>x(p,typeof g!="symbol"?g+"":g,t);import{P as z}from"./index-x1V5TmgY.js";import{B as w}from"./BaseGameScene-DWO2C2i8.js";class v extends w{constructor(t){super("PuzzleSolverScene");c(this,"currentPuzzleType","jigsaw");c(this,"puzzleLevel",1);c(this,"maxLevels",5);c(this,"jigsawPieces",[]);c(this,"jigsawSlots",[]);c(this,"draggedPiece",null);c(this,"patternChallenge",null);c(this,"patternTimer",null);c(this,"slidingGrid",[]);c(this,"slidingTiles",[]);c(this,"emptySlot",{x:2,y:2});c(this,"logicGrid",[]);c(this,"logicButtons",[]);c(this,"puzzleContainer");c(this,"uiContainer");c(this,"timerText");c(this,"puzzleStartTime",0);c(this,"bestTime",1/0);c(this,"hintsRemaining",3);this.init(t)}preload(){console.log("PuzzleSolverScene: Starting preload...");const t=this.add.graphics();t.fillStyle(4286945),t.fillRoundedRect(0,0,16,16,2),t.generateTexture("items",16,16),t.destroy(),console.log("PuzzleSolverScene: Preload complete!")}create(){super.create(),this.createBackground(),this.createUI(),this.startPuzzle(),this.puzzleStartTime=this.time.now}createBackground(){this.add.rectangle(400,300,800,600,2899536);for(let t=0;t<30;t++)this.add.circle(z.Math.Between(0,800),z.Math.Between(0,600),z.Math.Between(1,3),16777215,.3)}createUI(){this.uiContainer=this.add.container(0,0);const t=this.add.text(50,30,`Puzzle: ${this.getPuzzleTypeName()}`,{fontSize:"16px",color:"#ffffff",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}}),e=this.add.text(50,60,`Level: ${this.puzzleLevel}/${this.maxLevels}`,{fontSize:"16px",color:"#ffffff",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});this.timerText=this.add.text(400,30,"Time: 00:00",{fontSize:"16px",color:"#ffffff",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}}),this.timerText.setOrigin(.5,0);const n=this.add.text(750,30,`Hints: ${this.hintsRemaining}`,{fontSize:"16px",color:"#ffffff",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});n.setOrigin(1,0),n.setInteractive(),n.on("pointerdown",()=>this.useHint());const o=this.createButton(650,550,"Shuffle",()=>this.shufflePuzzle()),s=this.createButton(550,550,"Reset",()=>this.resetPuzzle()),i=this.createButton(450,550,"Skip",()=>this.skipPuzzle());this.uiContainer.add([t,e,this.timerText,n,o,s,i]),this.data.set("typeText",t),this.data.set("levelText",e),this.data.set("hintText",n)}getPuzzleTypeName(){switch(this.currentPuzzleType){case"jigsaw":return"Jigsaw";case"pattern":return"Pattern";case"sliding":return"Sliding";case"logic":return"Logic"}}createButton(t,e,n,o){const s=this.add.container(t,e),i=this.add.rectangle(0,0,80,30,4286945,.8);i.setStrokeStyle(2,16777215),i.setInteractive();const r=this.add.text(0,0,n,{fontSize:"12px",color:"#ffffff",fontFamily:"monospace",fontStyle:"bold"});return r.setOrigin(.5),s.add([i,r]),i.on("pointerdown",o),i.on("pointerover",()=>i.setFillStyle(5339633)),i.on("pointerout",()=>i.setFillStyle(4286945)),s}startPuzzle(){this.puzzleContainer&&this.puzzleContainer.destroy(),this.puzzleContainer=this.add.container(400,300);const t=["jigsaw","pattern","sliding","logic","jigsaw"];switch(this.currentPuzzleType=t[(this.puzzleLevel-1)%t.length],this.updateUI(),this.currentPuzzleType){case"jigsaw":this.createJigsawPuzzle();break;case"pattern":this.createPatternChallenge();break;case"sliding":this.createSlidingPuzzle();break;case"logic":this.createLogicPuzzle();break}}createJigsawPuzzle(){const t=Math.min(3+Math.floor(this.puzzleLevel/2),4),e=60,n=70;this.jigsawPieces=[],this.jigsawSlots=[];for(let i=0;i<t;i++)for(let r=0;r<t;r++){const l=(r-(t-1)/2)*n,a=(i-(t-1)/2)*n,d=this.add.rectangle(l,a,e,e,3355443,.5);d.setStrokeStyle(2,16777215,.5);const h={x:l,y:a,correctPieceId:i*t+r,occupied:!1,sprite:d};this.jigsawSlots.push(h),this.puzzleContainer.add(d)}const o=[16739179,5164484,4569041,9883316,16694123,13224393,14524637,15787660];for(let i=0;i<t*t;i++){const r=i/(t*t)*Math.PI*2,l=200,a=Math.cos(r)*l,d=Math.sin(r)*l,h=this.add.rectangle(a,d,e-4,e-4,o[i%o.length]);h.setStrokeStyle(2,0),h.setInteractive({draggable:!0});const u=this.add.text(a,d,(i+1).toString(),{fontSize:"14px",color:"#000000",fontFamily:"monospace",fontStyle:"bold"});u.setOrigin(.5);const f={sprite:h,originalX:a,originalY:d,currentSlot:null,id:i,isDragging:!1};this.jigsawPieces.push(f),this.puzzleContainer.add([h,u]),h.on("dragstart",()=>{f.isDragging=!0,this.draggedPiece=f,h.setDepth(100),u.setDepth(101)}),h.on("drag",(T,m,S)=>{h.x=m,h.y=S,u.x=m,u.y=S}),h.on("dragend",()=>{f.isDragging=!1,this.checkJigsawPlacement(f,u),h.setDepth(1),u.setDepth(2)})}const s=this.add.text(0,-200,"Drag pieces to their correct positions!",{fontSize:"16px",color:"#FFD700",fontFamily:"monospace",align:"center"});s.setOrigin(.5),this.puzzleContainer.add(s)}checkJigsawPlacement(t,e){let o=!1;for(const s of this.jigsawSlots)if(z.Math.Distance.Between(t.sprite.x,t.sprite.y,s.x,s.y)<40){t.sprite.x=s.x,t.sprite.y=s.y,e.x=s.x,e.y=s.y,t.currentSlot!==null&&(this.jigsawSlots[t.currentSlot].occupied=!1),t.currentSlot=this.jigsawSlots.indexOf(s),s.occupied=!0,o=!0,s.correctPieceId===t.id?(t.sprite.setTint(9498256),this.gameState.score+=50):t.sprite.clearTint();break}!o&&t.currentSlot!==null&&(t.currentSlot>=0&&t.currentSlot<this.jigsawSlots.length&&(this.jigsawSlots[t.currentSlot].occupied=!1),t.currentSlot=null,t.sprite.clearTint()),this.checkJigsawComplete()}checkJigsawComplete(){this.jigsawPieces.every(e=>e.currentSlot===null?!1:this.jigsawSlots[e.currentSlot].correctPieceId===e.id)&&this.completePuzzle()}createPatternChallenge(){const t=3+this.puzzleLevel,e=4,n=80,o=[16739179,5164484,4569041,9883316],s=[];for(let l=0;l<t;l++)s.push(z.Math.Between(0,e-1));const i=[];for(let l=0;l<e;l++){const a=(l-(e-1)/2)*100,h=this.add.rectangle(a,50,n,n,o[l]);h.setStrokeStyle(3,16777215),h.setInteractive(),h.on("pointerdown",()=>{this.patternChallenge&&this.handlePatternInput(l)}),i.push(h),this.puzzleContainer.add(h)}this.patternChallenge={pattern:s,playerPattern:[],currentStep:0,buttons:i};const r=this.add.text(0,-150,"Watch the pattern, then repeat it!",{fontSize:"16px",color:"#FFD700",fontFamily:"monospace",align:"center"});r.setOrigin(.5),this.puzzleContainer.add(r),this.time.delayedCall(1e3,()=>{this.showPattern()})}showPattern(){if(!this.patternChallenge)return;let t=0;const e=()=>{if(t<this.patternChallenge.pattern.length){const n=this.patternChallenge.pattern[t],o=this.patternChallenge.buttons[n];o.setTint(16777215),this.time.delayedCall(300,()=>{o.clearTint(),t++,this.time.delayedCall(200,e)})}else{const n=this.add.text(0,150,"Now repeat the pattern!",{fontSize:"14px",color:"#4ade80",fontFamily:"monospace"});n.setOrigin(.5),this.puzzleContainer.add(n)}};e()}handlePatternInput(t){if(!this.patternChallenge)return;const e=this.patternChallenge.buttons[t];e.setTint(16777215),this.time.delayedCall(200,()=>e.clearTint()),this.patternChallenge.playerPattern.push(t);const n=this.patternChallenge.playerPattern.length-1,o=this.patternChallenge.pattern[n];if(t!==o){this.showMessage("Wrong pattern! Try again.","#ff6b6b"),this.patternChallenge.playerPattern=[],this.time.delayedCall(1e3,()=>{this.showPattern()});return}this.patternChallenge.playerPattern.length===this.patternChallenge.pattern.length&&this.completePuzzle()}createSlidingPuzzle(){this.slidingGrid=[];for(let s=0;s<3;s++){this.slidingGrid[s]=[];for(let i=0;i<3;i++)s===2&&i===2?this.slidingGrid[s][i]=null:this.slidingGrid[s][i]=s*3+i+1}this.shuffleSlidingPuzzle(),this.slidingTiles=[];for(let s=0;s<3;s++)for(let i=0;i<3;i++){const r=(i-1)*65,l=(s-2/2)*65;if(this.slidingGrid[s][i]!==null){const a=this.add.rectangle(r,l,60,60,4286945);a.setStrokeStyle(2,16777215),a.setInteractive();const d=this.add.text(r,l,this.slidingGrid[s][i].toString(),{fontSize:"18px",color:"#ffffff",fontFamily:"monospace",fontStyle:"bold"});d.setOrigin(.5),a.setData("row",s),a.setData("col",i),a.on("pointerdown",()=>{this.moveSlidingTile(s,i)}),this.slidingTiles.push(a),this.puzzleContainer.add([a,d])}}const o=this.add.text(0,-180,`Click tiles to slide them into order!
Goal: 1-2-3
     4-5-6
     7-8-_`,{fontSize:"14px",color:"#FFD700",fontFamily:"monospace",align:"center"});o.setOrigin(.5),this.puzzleContainer.add(o)}shuffleSlidingPuzzle(){for(let t=0;t<100;t++){const e=this.emptySlot.y,n=this.emptySlot.x,o=[];[{row:-1,col:0},{row:1,col:0},{row:0,col:-1},{row:0,col:1}].forEach(r=>{const l=e+r.row,a=n+r.col;l>=0&&l<3&&a>=0&&a<3&&o.push({row:l,col:a})});const i=z.Utils.Array.GetRandom(o);this.moveSlidingTileInternal(i.row,i.col)}}moveSlidingTile(t,e){this.canMoveSlidingTile(t,e)&&(this.moveSlidingTileInternal(t,e),this.updateSlidingPuzzleDisplay(),this.checkSlidingPuzzleComplete())}canMoveSlidingTile(t,e){const n=this.emptySlot.y,o=this.emptySlot.x;return Math.abs(t-n)===1&&e===o||Math.abs(e-o)===1&&t===n}moveSlidingTileInternal(t,e){if(!this.canMoveSlidingTile(t,e))return;const n=this.emptySlot.y,o=this.emptySlot.x;this.slidingGrid[n][o]=this.slidingGrid[t][e],this.slidingGrid[t][e]=null,this.emptySlot.y=t,this.emptySlot.x=e}updateSlidingPuzzleDisplay(){this.slidingTiles.forEach(o=>o.destroy()),this.slidingTiles=[];const t=3,e=60,n=65;for(let o=0;o<t;o++)for(let s=0;s<t;s++)if(this.slidingGrid[o][s]!==null){const i=(s-(t-1)/2)*n,r=(o-(t-1)/2)*n,l=this.add.rectangle(i,r,e,e,4286945);l.setStrokeStyle(2,16777215),l.setInteractive();const a=this.add.text(i,r,this.slidingGrid[o][s].toString(),{fontSize:"18px",color:"#ffffff",fontFamily:"monospace",fontStyle:"bold"});a.setOrigin(.5),l.on("pointerdown",()=>{this.moveSlidingTile(o,s)}),this.slidingTiles.push(l),this.puzzleContainer.add([l,a])}}checkSlidingPuzzleComplete(){let t=1;for(let e=0;e<3;e++)for(let n=0;n<3;n++)if(e===2&&n===2){if(this.slidingGrid[e][n]!==null)return!1}else{if(this.slidingGrid[e][n]!==t)return!1;t++}return this.completePuzzle(),!0}createLogicPuzzle(){this.logicGrid=[],this.logicButtons=[];for(let s=0;s<4;s++){this.logicGrid[s]=[],this.logicButtons[s]=[];for(let i=0;i<4;i++){this.logicGrid[s][i]=!1;const r=(i-3/2)*50,l=(s-3/2)*50,a=this.add.rectangle(r,l,40,40,3355443);a.setStrokeStyle(2,16777215),a.setInteractive(),a.on("pointerdown",()=>{this.toggleLogicButton(s,i)}),this.logicButtons[s][i]=a,this.puzzleContainer.add(a)}}this.createLogicTarget();const o=this.add.text(0,-180,`Turn all lights OFF!
Clicking a light toggles it and its neighbors.`,{fontSize:"14px",color:"#FFD700",fontFamily:"monospace",align:"center"});o.setOrigin(.5),this.puzzleContainer.add(o)}createLogicTarget(){[{row:1,col:1},{row:2,col:2},{row:0,col:2}].forEach(e=>{this.toggleLogicButtonInternal(e.row,e.col)})}toggleLogicButton(t,e){this.toggleLogicButtonInternal(t,e),this.updateLogicDisplay(),this.checkLogicComplete()}toggleLogicButtonInternal(t,e){[{row:0,col:0},{row:-1,col:0},{row:1,col:0},{row:0,col:-1},{row:0,col:1}].forEach(o=>{const s=t+o.row,i=e+o.col;s>=0&&s<4&&i>=0&&i<4&&(this.logicGrid[s][i]=!this.logicGrid[s][i])})}updateLogicDisplay(){for(let t=0;t<4;t++)for(let e=0;e<4;e++)this.logicButtons[t][e].setFillStyle(this.logicGrid[t][e]?16766720:3355443)}checkLogicComplete(){this.logicGrid.every(e=>e.every(n=>!n))&&this.completePuzzle()}completePuzzle(){const t=this.time.now-this.puzzleStartTime,e=Math.floor(t/1e3);t<this.bestTime&&(this.bestTime=t,this.addAchievement("new_best_time")),this.gameState.score+=Math.max(1e3-e*10,100),this.addToInventory({id:`puzzle_${this.puzzleLevel}`,name:`${this.getPuzzleTypeName()} Puzzle Solution`,type:"key",description:`Completed in ${e} seconds`});const n=this.add.text(0,0,`Puzzle Complete!
Time: ${this.formatTime(e)}
+${Math.max(1e3-e*10,100)} points`,{fontSize:"18px",color:"#4ade80",fontFamily:"monospace",align:"center",backgroundColor:"#000000",padding:{x:15,y:10}});n.setOrigin(.5),n.setDepth(1e3),this.time.delayedCall(2500,()=>{n.destroy(),this.nextPuzzle()})}nextPuzzle(){this.puzzleLevel++,this.puzzleLevel>this.maxLevels?(this.addAchievement("puzzle_master"),this.addAchievement("all_puzzles_solved"),this.completeGame(this.gameState.score,this.gameState.achievements)):(this.puzzleStartTime=this.time.now,this.startPuzzle())}useHint(){if(this.hintsRemaining<=0){this.showMessage("No hints remaining!","#ff6b6b");return}this.hintsRemaining--;let t="";switch(this.currentPuzzleType){case"jigsaw":t="Look for pieces with matching colors or numbers!";break;case"pattern":t="Pay attention to the sequence of flashing colors!";break;case"sliding":t="Try to get the lowest numbers in their correct positions first!";break;case"logic":t="Each click affects the button and its 4 neighbors!";break}this.showMessage(`Hint: ${t}`,"#FFD700"),this.gameState.score-=50,this.updateUI()}shufflePuzzle(){this.currentPuzzleType==="sliding"&&(this.shuffleSlidingPuzzle(),this.updateSlidingPuzzleDisplay())}resetPuzzle(){this.puzzleStartTime=this.time.now,this.startPuzzle()}skipPuzzle(){this.gameState.score-=200,this.nextPuzzle()}showMessage(t,e="#ffffff"){const n=this.add.text(400,80,t,{fontSize:"14px",color:e,fontFamily:"monospace",align:"center",backgroundColor:"#000000",padding:{x:10,y:5}});n.setOrigin(.5),n.setDepth(1e3),this.time.delayedCall(2500,()=>{n.destroy()})}formatTime(t){const e=Math.floor(t/60),n=t%60;return`${e.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`}updateUITexts(){const t=this.data.get("typeText"),e=this.data.get("levelText"),n=this.data.get("hintText");t&&t.setText(`Puzzle: ${this.getPuzzleTypeName()}`),e&&e.setText(`Level: ${this.puzzleLevel}/${this.maxLevels}`),n&&n.setText(`Hints: ${this.hintsRemaining}`)}update(){const t=this.time.now-this.puzzleStartTime,e=Math.floor(t/1e3);this.timerText.setText(`Time: ${this.formatTime(e)}`),this.updateUITexts(),this.time.now%2e4<16&&this.saveGame()}}export{v as PuzzleSolverScene};

var f=Object.defineProperty;var u=(c,p,t)=>p in c?f(c,p,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[p]=t;var o=(c,p,t)=>u(c,typeof p!="symbol"?p+"":p,t);import{P as l}from"./index-x1V5TmgY.js";import{B as g}from"./BaseGameScene-DWO2C2i8.js";class w extends g{constructor(t){super("MathRPGScene");o(this,"player");o(this,"currentEnemy");o(this,"battleState","selecting");o(this,"mathProblem",null);o(this,"selectedAnswer",null);o(this,"questionContainer");o(this,"battleUI");o(this,"currentBattle",1);o(this,"maxBattles",5);o(this,"equipment",[]);o(this,"equippedWeapon",null);o(this,"equippedArmor",null);o(this,"backgroundMusic",null);this.init(t)}preload(){console.log("MathRPGScene: Starting preload...");const t=this.add.graphics();t.fillStyle(4286945),t.fillRect(0,0,32,32),t.generateTexture("hero",32,32),t.clear(),t.fillStyle(16729156),t.fillRect(0,0,32,32),t.generateTexture("enemies",32,32),t.clear(),t.fillStyle(16766720),t.fillCircle(8,8,8),t.generateTexture("items",16,16),t.destroy(),console.log("MathRPGScene: Preload complete!")}create(){super.create(),this.createBackground(),this.initializePlayer(),this.initializeEquipment(),this.createBattleUI(),this.startNextBattle()}createBackground(){this.add.rectangle(400,300,800,600,2899536);for(let t=0;t<50;t++)this.add.circle(l.Math.Between(0,800),l.Math.Between(0,300),1,16777215,.8);this.add.rectangle(400,550,800,100,9127187,.7)}initializePlayer(){this.player={name:this.customization.characterName||"Hero",hp:this.gameState.health||100,maxHp:100,attack:10,defense:5,level:this.gameState.level||1,exp:0,expToNext:100,sprite:this.add.sprite(200,400,"hero")},this.player.sprite.setScale(2),this.player.sprite.setTint(4286945)}initializeEquipment(){this.equipment=[{id:"wooden_sword",name:"Wooden Sword",type:"weapon",attackBonus:5,description:"A simple wooden sword. Better than fists!"},{id:"iron_sword",name:"Iron Sword",type:"weapon",attackBonus:12,description:"A sturdy iron sword. Deals good damage."},{id:"leather_armor",name:"Leather Armor",type:"armor",defenseBonus:3,description:"Basic leather armor. Provides some protection."},{id:"chainmail",name:"Chainmail",type:"armor",defenseBonus:8,description:"Heavy chainmail armor. Excellent protection."}],this.equippedWeapon=this.equipment.find(t=>t.id==="wooden_sword")||null,this.equippedArmor=this.equipment.find(t=>t.id==="leather_armor")||null,this.updatePlayerStats()}updatePlayerStats(){var t,e;this.player.attack=10+(((t=this.equippedWeapon)==null?void 0:t.attackBonus)||0),this.player.defense=5+(((e=this.equippedArmor)==null?void 0:e.defenseBonus)||0)}createBattleUI(){this.battleUI=this.add.container(0,0);const t=this.add.rectangle(150,50,200,20,3355443),e=this.add.rectangle(150,50,200,20,4906624);e.setOrigin(0,.5);const n=this.add.text(50,80,this.getPlayerInfoText(),{fontSize:"12px",color:"#ffffff",fontFamily:"monospace"}),i=this.add.rectangle(650,50,200,20,3355443),a=this.add.rectangle(650,50,200,20,16739179);a.setOrigin(1,.5),this.battleUI.add([t,e,n,i,a]),this.data.set("playerHpBar",e),this.data.set("playerInfo",n),this.data.set("enemyHpBar",a)}getPlayerInfoText(){return`${this.player.name} (Lv.${this.player.level})
HP: ${this.player.hp}/${this.player.maxHp}
ATK: ${this.player.attack} | DEF: ${this.player.defense}
EXP: ${this.player.exp}/${this.player.expToNext}`}startNextBattle(){if(this.currentBattle>this.maxBattles){this.completeGame(this.gameState.score,this.gameState.achievements);return}this.createEnemy(),this.battleState="selecting",this.showBattleOptions()}createEnemy(){var i;(i=this.currentEnemy)!=null&&i.sprite&&this.currentEnemy.sprite.destroy();const t=[{name:"Goblin",hp:40,attack:8,defense:2,rewards:{exp:25,gold:15}},{name:"Orc",hp:60,attack:12,defense:4,rewards:{exp:40,gold:25}},{name:"Troll",hp:100,attack:15,defense:8,rewards:{exp:60,gold:40}},{name:"Dragon",hp:150,attack:20,defense:12,rewards:{exp:100,gold:75}},{name:"Dark Lord",hp:200,attack:25,defense:15,rewards:{exp:150,gold:100}}],e=t[this.currentBattle-1]||t[t.length-1];this.currentEnemy={...e,maxHp:e.hp,sprite:this.add.sprite(600,350,"enemies")};const n=[16737894,16729156,9127187,16711680,4915330];this.currentEnemy.sprite.setScale(2.5),this.currentEnemy.sprite.setTint(n[this.currentBattle-1]||6710886),this.updateBattleUI()}showBattleOptions(){this.questionContainer&&this.questionContainer.destroy(),this.questionContainer=this.add.container(400,450);const t=this.add.rectangle(0,0,700,200,0,.8);t.setStrokeStyle(2,16777215);const e=this.createButton(-150,-50,"ATTACK",()=>this.startMathChallenge("attack")),n=this.createButton(150,-50,"DEFEND",()=>this.defend()),i=this.createButton(-150,50,"ITEMS",()=>this.useItem()),a=this.createButton(150,50,"RUN",()=>this.attemptRun());this.questionContainer.add([t,e,n,i,a])}createButton(t,e,n,i){const a=this.add.container(t,e),s=this.add.rectangle(0,0,120,40,4286945,.8);s.setStrokeStyle(2,16777215),s.setInteractive();const r=this.add.text(0,0,n,{fontSize:"14px",color:"#ffffff",fontFamily:"monospace",fontStyle:"bold"});return r.setOrigin(.5),a.add([s,r]),s.on("pointerdown",i),s.on("pointerover",()=>s.setFillStyle(5339633)),s.on("pointerout",()=>s.setFillStyle(4286945)),a}startMathChallenge(t){this.battleState="question",this.mathProblem=this.generateMathProblem(),this.showMathProblem()}generateMathProblem(){const t=Math.min(this.currentBattle,5),e=["addition","subtraction","multiplication","division"],n=e[Math.floor(Math.random()*e.length)];let i,a,s,r;switch(n){case"addition":i=l.Math.Between(1+t*2,20+t*5),a=l.Math.Between(1+t*2,20+t*5),s=i+a,r=`${i} + ${a} = ?`;break;case"subtraction":i=l.Math.Between(10+t*5,50+t*10),a=l.Math.Between(1+t*2,i-1),s=i-a,r=`${i} - ${a} = ?`;break;case"multiplication":i=l.Math.Between(2+t,12),a=l.Math.Between(2+t,12),s=i*a,r=`${i} ร ${a} = ?`;break;case"division":s=l.Math.Between(2+t,15),a=l.Math.Between(2+t,10),i=s*a,r=`${i} รท ${a} = ?`;break;default:i=5,a=3,s=8,r="5 + 3 = ?"}const h=[s];for(;h.length<4;){const d=s+l.Math.Between(-10,10);d!==s&&d>0&&!h.includes(d)&&h.push(d)}for(let d=h.length-1;d>0;d--){const m=Math.floor(Math.random()*(d+1));[h[d],h[m]]=[h[m],h[d]]}return{question:r,options:h,correctAnswer:s,difficulty:t,type:n}}showMathProblem(){if(!this.mathProblem)return;this.questionContainer&&this.questionContainer.destroy(),this.questionContainer=this.add.container(400,450);const t=this.add.rectangle(0,0,700,200,0,.9);t.setStrokeStyle(3,16766720);const e=this.add.text(0,-60,this.mathProblem.question,{fontSize:"24px",color:"#FFD700",fontFamily:"monospace",fontStyle:"bold"});e.setOrigin(.5),this.questionContainer.add([t,e]);const n=[{x:-150,y:20},{x:50,y:20},{x:-150,y:70},{x:50,y:70}];this.mathProblem.options.forEach((h,d)=>{const m=n[d],y=this.createAnswerButton(m.x,m.y,h.toString(),h);this.questionContainer.add(y)});const i=15,a=this.add.text(0,-20,`Time: ${i}`,{fontSize:"16px",color:"#ffffff",fontFamily:"monospace"});a.setOrigin(.5),this.questionContainer.add(a);let s=i;const r=this.time.addEvent({delay:1e3,callback:()=>{s--,a.setText(`Time: ${s}`),s<=0&&(r.remove(),this.handleAnswer(null))},repeat:i-1});this.data.set("mathTimer",r)}createAnswerButton(t,e,n,i){const a=this.add.container(t,e),s=this.add.rectangle(0,0,80,30,4286945,.8);s.setStrokeStyle(2,16777215),s.setInteractive();const r=this.add.text(0,0,n,{fontSize:"16px",color:"#ffffff",fontFamily:"monospace",fontStyle:"bold"});return r.setOrigin(.5),a.add([s,r]),s.on("pointerdown",()=>this.handleAnswer(i)),s.on("pointerover",()=>s.setFillStyle(5339633)),s.on("pointerout",()=>s.setFillStyle(4286945)),a}handleAnswer(t){if(!this.mathProblem)return;const e=this.data.get("mathTimer");e&&e.remove();const n=t===this.mathProblem.correctAnswer;this.battleState="result",this.showResult(n,t),this.time.delayedCall(1500,()=>{this.applyBattleResult(n)})}showResult(t,e){if(!this.mathProblem)return;const n=t?"CORRECT! Critical Hit!":`WRONG! The answer was ${this.mathProblem.correctAnswer}`,i=t?"#4ade80":"#ff6b6b",a=this.add.text(400,200,n,{fontSize:"18px",color:i,fontFamily:"monospace",fontStyle:"bold",backgroundColor:"#000000",padding:{x:10,y:5}});a.setOrigin(.5),a.setScale(0),this.tweens.add({targets:a,scale:1,duration:300,ease:"Back.easeOut"}),this.time.delayedCall(1500,()=>{a.destroy()})}applyBattleResult(t){if(t){let e=this.player.attack+l.Math.Between(-2,5);if(e=Math.max(1,e-this.currentEnemy.defense),e=Math.floor(e*1.5),this.currentEnemy.hp=Math.max(0,this.currentEnemy.hp-e),this.createDamageEffect(this.currentEnemy.sprite.x,this.currentEnemy.sprite.y,e,"#ff0000"),this.currentEnemy.hp<=0){this.handleEnemyDefeat();return}}this.time.delayedCall(800,()=>{this.enemyAttack()})}enemyAttack(){const t=Math.max(1,this.currentEnemy.attack-this.player.defense);this.player.hp=Math.max(0,this.player.hp-t),this.createDamageEffect(this.player.sprite.x,this.player.sprite.y,t,"#ff6b6b"),this.player.sprite.setTint(16711680),this.time.delayedCall(200,()=>{this.player.sprite.setTint(4286945)}),this.updateBattleUI(),this.player.hp<=0?this.handlePlayerDefeat():this.time.delayedCall(1e3,()=>{this.battleState="selecting",this.showBattleOptions()})}createDamageEffect(t,e,n,i){const a=this.add.text(t,e-30,`-${n}`,{fontSize:"20px",color:i,fontFamily:"monospace",fontStyle:"bold"});a.setOrigin(.5),this.tweens.add({targets:a,y:e-80,alpha:0,duration:1e3,ease:"Power2",onComplete:()=>a.destroy()})}handleEnemyDefeat(){this.player.exp+=this.currentEnemy.rewards.exp,this.gameState.score+=this.currentEnemy.rewards.gold,this.player.exp>=this.player.expToNext&&this.levelUp(),this.addAchievement(`defeated_${this.currentEnemy.name.toLowerCase()}`);const t=this.add.text(400,200,`Victory!
+${this.currentEnemy.rewards.exp} EXP
+${this.currentEnemy.rewards.gold} Gold`,{fontSize:"18px",color:"#4ade80",fontFamily:"monospace",fontStyle:"bold",align:"center",backgroundColor:"#000000",padding:{x:10,y:8}});t.setOrigin(.5),this.time.delayedCall(3e3,()=>{t.destroy(),this.currentBattle++,this.startNextBattle()}),this.updateBattleUI()}levelUp(){this.player.level++,this.player.exp=this.player.exp-this.player.expToNext,this.player.expToNext=Math.floor(this.player.expToNext*1.5),this.player.maxHp+=20,this.player.hp=this.player.maxHp,this.player.attack+=3,this.player.defense+=2;const t=this.add.text(400,150,`LEVEL UP!
Level ${this.player.level}`,{fontSize:"24px",color:"#FFD700",fontFamily:"monospace",fontStyle:"bold",align:"center"});t.setOrigin(.5);for(let e=0;e<20;e++){const n=this.add.circle(this.player.sprite.x+l.Math.Between(-40,40),this.player.sprite.y+l.Math.Between(-40,40),2,16766720);this.tweens.add({targets:n,alpha:0,scale:2,duration:1e3,onComplete:()=>n.destroy()})}this.time.delayedCall(2e3,()=>{t.destroy()}),this.addAchievement("level_up")}handlePlayerDefeat(){this.gameState.lives--,this.gameState.lives<=0?(this.add.text(400,300,`GAME OVER
Your mathematical journey ends here...`,{fontSize:"24px",color:"#ff0000",fontFamily:"monospace",fontStyle:"bold",align:"center"}).setOrigin(.5),this.time.delayedCall(3e3,()=>{this.completeGame(this.gameState.score,this.gameState.achievements)})):(this.player.hp=Math.floor(this.player.maxHp/2),this.updateBattleUI(),this.time.delayedCall(1e3,()=>{this.battleState="selecting",this.showBattleOptions()}))}defend(){this.player.hp=Math.min(this.player.maxHp,this.player.hp+10);const t=this.add.text(400,200,`Defending!
+10 HP`,{fontSize:"16px",color:"#4ade80",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});t.setOrigin(.5),this.time.delayedCall(1500,()=>{t.destroy();const e=this.player.defense;this.player.defense+=5,this.enemyAttack(),this.player.defense=e})}useItem(){const t=this.gameState.inventory.filter(e=>e.type==="potion");if(t.length>0){this.player.hp=Math.min(this.player.maxHp,this.player.hp+30),t[0].quantity--,t[0].quantity<=0&&(this.gameState.inventory=this.gameState.inventory.filter(n=>n!==t[0]));const e=this.add.text(400,200,`Used Health Potion!
+30 HP`,{fontSize:"16px",color:"#4ade80",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});e.setOrigin(.5),this.time.delayedCall(1500,()=>{e.destroy(),this.enemyAttack()})}else{const e=this.add.text(400,200,"No items available!",{fontSize:"16px",color:"#ff6b6b",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});e.setOrigin(.5),this.time.delayedCall(1e3,()=>{e.destroy(),this.showBattleOptions()})}this.updateBattleUI()}attemptRun(){if(Math.random()<.7){const e=this.add.text(400,200,"Successfully ran away!",{fontSize:"16px",color:"#4ade80",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});e.setOrigin(.5),this.time.delayedCall(2e3,()=>{e.destroy(),this.currentBattle++,this.startNextBattle()})}else{const e=this.add.text(400,200,"Can't escape!",{fontSize:"16px",color:"#ff6b6b",fontFamily:"monospace",backgroundColor:"#000000",padding:{x:8,y:4}});e.setOrigin(.5),this.time.delayedCall(1500,()=>{e.destroy(),this.enemyAttack()})}}updateBattleUI(){const t=this.data.get("playerHpBar"),e=this.data.get("playerInfo"),n=this.data.get("enemyHpBar");if(t){const i=this.player.hp/this.player.maxHp;t.scaleX=i}if(e&&e.setText(this.getPlayerInfoText()),n&&this.currentEnemy){const i=this.currentEnemy.hp/this.currentEnemy.maxHp;n.scaleX=i}this.gameState.health=this.player.hp,this.updateUI()}update(){}}export{w as MathRPGScene};
